name: build
on:
  pull_request:
    branches:
      - '**'
  workflow_dispatch:
    inputs:
      branch_service:
        description: 'Service branch'
        required: true
        default: 'master'
      branch_authorization:
        description: 'Authorization branch'
        required: true
        default: 'master'
      branch_gateway:
        description: 'Gateway branch'
        required: true
        default: 'master'
      branch_integration:
        description: 'Integration branch'
        required: true
        default: 'master'
      branch_ui:
        description: 'UI branch'
        required: true
        default: 'master'
env:
   MAVEN_OPTS: -Xmx1g
jobs:
   build:
      runs-on: ubuntu-latest
      steps:
      -  name: Get current date
         id: date
         run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
      -  uses: actions/checkout@v2
      -  name: Set up JDK 17
         uses: actions/setup-java@v1
         with:
            java-version: 17
      -  name: Cache Maven packages
         uses: actions/cache@v2
         with:
            path: ~/.m2
            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            restore-keys: ${{ runner.os }}-m2
      -  name: maven-settings-xml-action
         uses: whelk-io/maven-settings-xml-action@v14
         with:
            repositories: '[{ "id": "repository.spring.milestone", "url": "https://repo.spring.io/milestone" }]'
      -  name: Checkout exemple service
         uses: actions/checkout@v2
         with:
            path: exemple-service
            repository: doudouchat/exemple-service
            ref: ${{ github.event.inputs.branch_service }}
      -  name: Checkout exemple authorization
         uses: actions/checkout@v2
         with:
            path: exemple-authorization
            repository: doudouchat/exemple-authorization
            ref: ${{ github.event.inputs.branch_authorization }}
      -  name: Checkout exemple gateway
         uses: actions/checkout@v2
         with:
            path: exemple-gateway
            repository: doudouchat/exemple-gateway
            ref: ${{ github.event.inputs.branch_gateway }}
      -  name: Checkout exemple integration
         uses: actions/checkout@v2
         with:
            path: exemple-integration
            repository: doudouchat/exemple-integration
            ref: ${{ github.event.inputs.branch_integration }}
      -  name: Get npm cache directory
         id: npm-cache-dir
         run: |
           echo "::set-output name=dir::$(npm config get cache)"
      -  uses: actions/cache@v3
         id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
         with:
           path: ${{ steps.npm-cache-dir.outputs.dir }}
           key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
           restore-keys: |
            ${{ runner.os }}-node-
      -  name: Use Node.js 16.18.0
         uses: actions/setup-node@v1
         with:
            node-version: 16.18.0
      -  name: Checkout exemple ui
         uses: actions/checkout@v2
         with:
            path: exemple-ui
            repository: doudouchat/exemple-ui
            ref: ${{ github.event.inputs.branch_ui }}
      -  name: launch zookeeper
         run: |
           docker-compose up -d zookeeper
           ./wait-for-container-ready.sh exemple-zookeeper
           docker container exec exemple-zookeeper ls -la
           docker container exec exemple-zookeeper bin/zkCli.sh create /authorization
           docker container exec exemple-zookeeper bin/zkCli.sh create /authorization/resource
           docker container exec exemple-zookeeper bin/zkCli.sh set /authorization/resource '{"client_id":"resource","client_secret":"{bcrypt}$2a$10$I3FyNzNSYN5R5U.4GOWpp.0Np33uJ59p412xzdit798c1jJHCsPja","authorized_grant_types":["client_credentials"],"redirect_uri":[],"autoapprove":[],"authorities":["ROLE_TRUSTED_CLIENT"]}'
           docker container exec exemple-zookeeper bin/zkCli.sh create /authorization/test_service
           docker container exec exemple-zookeeper bin/zkCli.sh set /authorization/test_service '{"scope":["account:create","login:head","login:create","subscription:update","subscription:read"],"client_id":"test_service","client_secret":"{bcrypt}$2a$10$FTfSAcT9WVzgHIPqT6dGU.THUVQNReDhMXlB.aq1C8FCPPktD2.Lq","authorized_grant_types":["client_credentials"],"redirect_uri":["xxx"],"autoapprove":["login:create","account:create","subscription:update","subscription:read"],"authorities":["ROLE_APP"],"keyspace":"test_authorization"}'
           docker container exec exemple-zookeeper bin/zkCli.sh create /authorization/test_service_user
           docker container exec exemple-zookeeper bin/zkCli.sh set /authorization/test_service_user '{"scope":["account:read","account:update","login:create","login:update","login:delete","login:read","login:head"],"client_id":"test_service_user","client_secret":"{bcrypt}$2a$10$FTfSAcT9WVzgHIPqT6dGU.THUVQNReDhMXlB.aq1C8FCPPktD2.Lq","authorized_grant_types":["password","authorization_code","refresh_token"],"redirect_uri":["xxx"],"autoapprove":["account:read","login:create","login:delete","account:update","login:read","login:update"],"authorities":["ROLE_APP"],"keyspace":"test_authorization"}'
           docker container exec exemple-zookeeper bin/zkCli.sh create /application
           docker container exec exemple-zookeeper bin/zkCli.sh create /application/test
           docker container exec exemple-zookeeper bin/zkCli.sh set /application/test '{"keyspace":"test_service","authorization_keyspace":"test_authorization","company":"test_company","authorization_clientIds":["test_service","test_service_user"],"clientIds":["test_service","test_service_user"]}'
      -  name: launch hazelcast
         run: |
           docker-compose up -d hazelcast
      -  name: launch kafka
         run: docker-compose up -d kafka
      -  name: launch cassandra
         run: |
            mkdir resources
            cp -r ${{ github.workspace }}/exemple-integration/src/test/resources/cassandra resources
            cp conf/service/schemas/test_service_schema.cql resources/cassandra
            docker-compose up -d cassandra
            ./wait-for-container-ready.sh exemple-cassandra
            docker container exec exemple-cassandra cqlsh --debug -f /usr/local/tmp/cassandra/schema.cql
            docker container exec exemple-cassandra cqlsh --debug -f /usr/local/tmp/cassandra/exec.cql
            docker container exec exemple-cassandra cqlsh --debug -f /usr/local/tmp/cassandra/test_service_schema.cql
      -  name: Build exemple authorization
         run: |
            mvn -f ${{ github.workspace }}/exemple-authorization clean install -Dmaven.test.skip=true
            docker build -t exemple-authorization --build-arg VERSION_TOMCAT=9.0.70-jdk17 ${{ github.workspace }}/exemple-authorization
            docker-compose up -d authorization
      -  name: check authorization
         if: ${{ false }}
         run: ./wait-for-container-ready.sh exemple-authorization
      -  name: Build exemple service
         run: |
            mvn -f ${{ github.workspace }}/exemple-service clean install -Dmaven.test.skip=true
            docker build -t exemple-service --build-arg VERSION_TOMCAT=10.1.4-jdk17 ${{ github.workspace }}/exemple-service
            docker-compose up -d service
      -  name: check service
         if: ${{ false }}
         run: ./wait-for-container-ready.sh exemple-service
      -  name: Build exemple gateway
         run: |
            mvn -f ${{ github.workspace }}/exemple-gateway clean install -Dmaven.test.skip=true
            docker build -t exemple-gateway --build-arg VERSION_OPENJDK=17-jdk-buster ${{ github.workspace }}/exemple-gateway
            docker-compose -f docker-compose.yml -f docker-compose.browser.yml up -d gateway
      -  name: check gateway
         if: ${{ false }}
         run: ./wait-for-container-ready.sh exemple-gateway
      -  name: install exemple ui
         working-directory: ${{ github.workspace }}/exemple-ui/exemple-ui-front
         run: npm ci
      -  name: pre-test exemple
         run: |
            npm ci
            npm run-script test
      -  name: test exemple ui
         working-directory: ${{ github.workspace }}/exemple-ui/exemple-ui-front
         run: |
          CHROME_VERSION=$(google-chrome --version | grep -ioE "[0-9.]{10,20}")
          echo chrome version is $CHROME_VERSION
          node_modules/.bin/webdriver-manager update --versions.chrome $CHROME_VERSION
          npm run-script e2e -- --webdriver-update=false
      -  name: display logs hazelcast
         if: ${{ always() }}
         run: docker container logs exemple-hazelcast
      -  name: display logs zookeeper
         if: ${{ always() }}
         run: docker container logs exemple-zookeeper
      -  name: display logs kafka
         if: ${{ always() }}
         run: docker container logs exemple-kafka
      -  name: display logs cassandra
         if: ${{ always() }}
         run: docker container logs exemple-cassandra
      -  name: display logs service
         if: ${{ always() }}
         run: docker container logs exemple-service
      -  name: display logs authorization
         if: ${{ always() }}
         run: docker container logs exemple-authorization
      -  name: display logs gateway
         if: ${{ always() }}
         run: docker container logs exemple-gateway
      -  name: display logs service
         if: ${{ always() }}
         run: docker container exec exemple-service cat logs/archive/exemple_service.${{ steps.date.outputs.date }}.log
      -  name: display logs authorization
         if: ${{ always() }}
         run: docker container exec exemple-authorization cat logs/archive/exemple_authorization.${{ steps.date.outputs.date }}.log
      -  name: display logs gateway
         if: ${{ always() }}
         run: docker container exec exemple-gateway cat tmp/logs/archive/exemple_gateway.${{ steps.date.outputs.date }}.log
